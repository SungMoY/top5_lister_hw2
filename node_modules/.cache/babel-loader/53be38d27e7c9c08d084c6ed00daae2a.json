{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sung Mo Yang\\\\Desktop\\\\top5_lister_hw2\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css'; // IMPORT DATA MANAGEMENT AND TRANSACTION STUFF\n\nimport DBManager from './db/DBManager'; // THESE ARE OUR REACT COMPONENTS\n\nimport DeleteModal from './components/DeleteModal';\nimport Banner from './components/Banner.js';\nimport Sidebar from './components/Sidebar.js';\nimport Workspace from './components/Workspace.js';\nimport Statusbar from './components/Statusbar.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // THIS WILL TALK TO LOCAL STORAGE\n\n    this.sortKeyNamePairsByName = keyNamePairs => {\n      keyNamePairs.sort((keyPair1, keyPair2) => {\n        // GET THE LISTS\n        return keyPair1.name.localeCompare(keyPair2.name);\n      });\n    };\n\n    this.createNewList = () => {\n      // FIRST FIGURE OUT WHAT THE NEW LIST'S KEY AND NAME WILL BE\n      let newKey = this.state.sessionData.nextKey;\n      let newName = \"Untitled\" + newKey; // MAKE THE NEW LIST\n\n      let newList = {\n        key: newKey,\n        name: newName,\n        items: [\"?\", \"?\", \"?\", \"?\", \"?\"]\n      }; // MAKE THE KEY,NAME OBJECT SO WE CAN KEEP IT IN OUR\n      // SESSION DATA SO IT WILL BE IN OUR LIST OF LISTS\n\n      let newKeyNamePair = {\n        \"key\": newKey,\n        \"name\": newName\n      };\n      let updatedPairs = [...this.state.sessionData.keyNamePairs, newKeyNamePair];\n      this.sortKeyNamePairsByName(updatedPairs); // CHANGE THE APP STATE SO THAT IT THE CURRENT LIST IS\n      // THIS NEW LIST AND UPDATE THE SESSION DATA SO THAT THE\n      // NEXT LIST CAN BE MADE AS WELL. NOTE, THIS setState WILL\n      // FORCE A CALL TO render, BUT THIS UPDATE IS ASYNCHRONOUS,\n      // SO ANY AFTER EFFECTS THAT NEED TO USE THIS UPDATED STATE\n      // SHOULD BE DONE VIA ITS CALLBACK\n\n      this.setState(prevState => ({\n        currentList: newList,\n        sessionData: {\n          nextKey: prevState.sessionData.nextKey + 1,\n          counter: prevState.sessionData.counter + 1,\n          keyNamePairs: updatedPairs\n        }\n      }), () => {\n        // PUTTING THIS NEW LIST IN PERMANENT STORAGE\n        // IS AN AFTER EFFECT\n        this.db.mutationCreateList(newList);\n      });\n    };\n\n    this.renameList = (key, newName) => {\n      let newKeyNamePairs = [...this.state.sessionData.keyNamePairs]; // NOW GO THROUGH THE ARRAY AND FIND THE ONE TO RENAME\n\n      for (let i = 0; i < newKeyNamePairs.length; i++) {\n        let pair = newKeyNamePairs[i];\n\n        if (pair.key === key) {\n          pair.name = newName;\n        }\n      }\n\n      this.sortKeyNamePairsByName(newKeyNamePairs); // WE MAY HAVE TO RENAME THE currentList\n\n      let currentList = this.state.currentList;\n\n      if (currentList.key === key) {\n        currentList.name = newName;\n      }\n\n      this.setState(prevState => ({\n        currentList: prevState.currentList,\n        sessionData: {\n          nextKey: prevState.sessionData.nextKey,\n          counter: prevState.sessionData.counter,\n          keyNamePairs: newKeyNamePairs\n        }\n      }), () => {\n        // AN AFTER EFFECT IS THAT WE NEED TO MAKE SURE\n        // THE TRANSACTION STACK IS CLEARED\n        let list = this.db.queryGetList(key);\n        list.name = newName;\n        this.db.mutationUpdateList(list);\n        this.db.mutationUpdateSessionData(this.state.sessionData);\n      });\n    };\n\n    this.loadList = key => {\n      let newCurrentList = this.db.queryGetList(key);\n      this.setState(prevState => ({\n        currentList: newCurrentList,\n        sessionData: prevState.sessionData\n      }), () => {// ANY AFTER EFFECTS?\n      });\n    };\n\n    this.closeCurrentList = () => {\n      this.setState(prevState => ({\n        currentList: null,\n        listKeyPairMarkedForDeletion: prevState.listKeyPairMarkedForDeletion,\n        sessionData: this.state.sessionData\n      }), () => {// ANY AFTER EFFECTS?\n      });\n    };\n\n    this.deleteList = () => {\n      // SOMEHOW YOU ARE GOING TO HAVE TO FIGURE OUT\n      // WHICH LIST IT IS THAT THE USER WANTS TO\n      // DELETE AND MAKE THAT CONNECTION SO THAT THE\n      // NAME PROPERLY DISPLAYS INSIDE THE MODAL\n      this.showDeleteListModal();\n    };\n\n    this.db = new DBManager(); // GET THE SESSION DATA FROM OUR DATA MANAGER\n\n    let loadedSessionData = this.db.queryGetSessionData(); // SETUP THE INITIAL STATE\n\n    this.state = {\n      currentList: null,\n      sessionData: loadedSessionData\n    };\n  }\n\n  // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\n  // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\n  showDeleteListModal() {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.add(\"is-visible\");\n  } // THIS FUNCTION IS FOR HIDING THE MODAL\n\n\n  hideDeleteListModal() {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"app-root\",\n      children: [/*#__PURE__*/_jsxDEV(Banner, {\n        title: \"Top 5 Lister\",\n        closeCallback: this.closeCurrentList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n        heading: \"Your Lists\",\n        currentList: this.state.currentList,\n        keyNamePairs: this.state.sessionData.keyNamePairs,\n        createNewListCallback: this.createNewList,\n        deleteListCallback: this.deleteList,\n        loadListCallback: this.loadList,\n        renameListCallback: this.renameList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Workspace, {\n        currentList: this.state.currentList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Statusbar, {\n        currentList: this.state.currentList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DeleteModal, {\n        hideDeleteListModalCallback: this.hideDeleteListModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Sung Mo Yang/Desktop/top5_lister_hw2/src/App.js"],"names":["React","DBManager","DeleteModal","Banner","Sidebar","Workspace","Statusbar","App","Component","constructor","props","sortKeyNamePairsByName","keyNamePairs","sort","keyPair1","keyPair2","name","localeCompare","createNewList","newKey","state","sessionData","nextKey","newName","newList","key","items","newKeyNamePair","updatedPairs","setState","prevState","currentList","counter","db","mutationCreateList","renameList","newKeyNamePairs","i","length","pair","list","queryGetList","mutationUpdateList","mutationUpdateSessionData","loadList","newCurrentList","closeCurrentList","listKeyPairMarkedForDeletion","deleteList","showDeleteListModal","loadedSessionData","queryGetSessionData","modal","document","getElementById","classList","add","hideDeleteListModal","remove","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n// IMPORT DATA MANAGEMENT AND TRANSACTION STUFF\r\nimport DBManager from './db/DBManager';\r\n\r\n// THESE ARE OUR REACT COMPONENTS\r\nimport DeleteModal from './components/DeleteModal';\r\nimport Banner from './components/Banner.js'\r\nimport Sidebar from './components/Sidebar.js'\r\nimport Workspace from './components/Workspace.js';\r\nimport Statusbar from './components/Statusbar.js'\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // THIS WILL TALK TO LOCAL STORAGE\r\n        this.db = new DBManager();\r\n\r\n        // GET THE SESSION DATA FROM OUR DATA MANAGER\r\n        let loadedSessionData = this.db.queryGetSessionData();\r\n\r\n        // SETUP THE INITIAL STATE\r\n        this.state = {\r\n            currentList : null,\r\n            sessionData : loadedSessionData\r\n        }\r\n    }\r\n    sortKeyNamePairsByName = (keyNamePairs) => {\r\n        keyNamePairs.sort((keyPair1, keyPair2) => {\r\n            // GET THE LISTS\r\n            return keyPair1.name.localeCompare(keyPair2.name);\r\n        });\r\n    }\r\n    // THIS FUNCTION BEGINS THE PROCESS OF CREATING A NEW LIST\r\n    createNewList = () => {\r\n        // FIRST FIGURE OUT WHAT THE NEW LIST'S KEY AND NAME WILL BE\r\n        let newKey = this.state.sessionData.nextKey;\r\n        let newName = \"Untitled\" + newKey;\r\n\r\n        // MAKE THE NEW LIST\r\n        let newList = {\r\n            key: newKey,\r\n            name: newName,\r\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"]\r\n        };\r\n\r\n        // MAKE THE KEY,NAME OBJECT SO WE CAN KEEP IT IN OUR\r\n        // SESSION DATA SO IT WILL BE IN OUR LIST OF LISTS\r\n        let newKeyNamePair = { \"key\": newKey, \"name\": newName };\r\n        let updatedPairs = [...this.state.sessionData.keyNamePairs, newKeyNamePair];\r\n        this.sortKeyNamePairsByName(updatedPairs);\r\n\r\n        // CHANGE THE APP STATE SO THAT IT THE CURRENT LIST IS\r\n        // THIS NEW LIST AND UPDATE THE SESSION DATA SO THAT THE\r\n        // NEXT LIST CAN BE MADE AS WELL. NOTE, THIS setState WILL\r\n        // FORCE A CALL TO render, BUT THIS UPDATE IS ASYNCHRONOUS,\r\n        // SO ANY AFTER EFFECTS THAT NEED TO USE THIS UPDATED STATE\r\n        // SHOULD BE DONE VIA ITS CALLBACK\r\n        this.setState(prevState => ({\r\n            currentList: newList,\r\n            sessionData: {\r\n                nextKey: prevState.sessionData.nextKey + 1,\r\n                counter: prevState.sessionData.counter + 1,\r\n                keyNamePairs: updatedPairs\r\n            }\r\n        }), () => {\r\n            // PUTTING THIS NEW LIST IN PERMANENT STORAGE\r\n            // IS AN AFTER EFFECT\r\n            this.db.mutationCreateList(newList);\r\n        });\r\n    }\r\n    renameList = (key, newName) => {\r\n        let newKeyNamePairs = [...this.state.sessionData.keyNamePairs];\r\n        // NOW GO THROUGH THE ARRAY AND FIND THE ONE TO RENAME\r\n        for (let i = 0; i < newKeyNamePairs.length; i++) {\r\n            let pair = newKeyNamePairs[i];\r\n            if (pair.key === key) {\r\n                pair.name = newName;\r\n            }\r\n        }\r\n        this.sortKeyNamePairsByName(newKeyNamePairs);\r\n\r\n        // WE MAY HAVE TO RENAME THE currentList\r\n        let currentList = this.state.currentList;\r\n        if (currentList.key === key) {\r\n            currentList.name = newName;\r\n        }\r\n\r\n        this.setState(prevState => ({\r\n            currentList: prevState.currentList,\r\n            sessionData: {\r\n                nextKey: prevState.sessionData.nextKey,\r\n                counter: prevState.sessionData.counter,\r\n                keyNamePairs: newKeyNamePairs\r\n            }\r\n        }), () => {\r\n            // AN AFTER EFFECT IS THAT WE NEED TO MAKE SURE\r\n            // THE TRANSACTION STACK IS CLEARED\r\n            let list = this.db.queryGetList(key);\r\n            list.name = newName;\r\n            this.db.mutationUpdateList(list);\r\n            this.db.mutationUpdateSessionData(this.state.sessionData);\r\n        });\r\n    }\r\n    // THIS FUNCTION BEGINS THE PROCESS OF LOADING A LIST FOR EDITING\r\n    loadList = (key) => {\r\n        let newCurrentList = this.db.queryGetList(key);\r\n        this.setState(prevState => ({\r\n            currentList: newCurrentList,\r\n            sessionData: prevState.sessionData\r\n        }), () => {\r\n            // ANY AFTER EFFECTS?\r\n        });\r\n    }\r\n    // THIS FUNCTION BEGINS THE PROCESS OF CLOSING THE CURRENT LIST\r\n    closeCurrentList = () => {\r\n        this.setState(prevState => ({\r\n            currentList: null,\r\n            listKeyPairMarkedForDeletion : prevState.listKeyPairMarkedForDeletion,\r\n            sessionData: this.state.sessionData\r\n        }), () => {\r\n            // ANY AFTER EFFECTS?\r\n        });\r\n    }\r\n    deleteList = () => {\r\n        // SOMEHOW YOU ARE GOING TO HAVE TO FIGURE OUT\r\n        // WHICH LIST IT IS THAT THE USER WANTS TO\r\n        // DELETE AND MAKE THAT CONNECTION SO THAT THE\r\n        // NAME PROPERLY DISPLAYS INSIDE THE MODAL\r\n        this.showDeleteListModal();\r\n    }\r\n    // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\r\n    // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\r\n    showDeleteListModal() {\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.add(\"is-visible\");\r\n    }\r\n    // THIS FUNCTION IS FOR HIDING THE MODAL\r\n    hideDeleteListModal() {\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.remove(\"is-visible\");\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"app-root\">\r\n                <Banner \r\n                    title='Top 5 Lister'\r\n                    closeCallback={this.closeCurrentList} />\r\n                <Sidebar\r\n                    heading='Your Lists'\r\n                    currentList={this.state.currentList}\r\n                    keyNamePairs={this.state.sessionData.keyNamePairs}\r\n                    createNewListCallback={this.createNewList}\r\n                    deleteListCallback={this.deleteList}\r\n                    loadListCallback={this.loadList}\r\n                    renameListCallback={this.renameList}\r\n                />\r\n                <Workspace\r\n                    currentList={this.state.currentList} />\r\n                <Statusbar \r\n                    currentList={this.state.currentList} />\r\n                <DeleteModal\r\n                    hideDeleteListModalCallback={this.hideDeleteListModal}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}